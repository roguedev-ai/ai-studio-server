version: '3.8'
services:
  gideon-studio:
    build:
      context: ./lobe-chat-custom
      dockerfile: Dockerfile.database
      args:
        FEATURE_FLAGS: "-market"
        NEXT_PUBLIC_SERVICE_MODE: "server"
        NEXT_PUBLIC_ENABLE_NEXT_AUTH: "0"
    ports:
      - "3000:3210"
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    environment:
      - NODE_ENV=production
      # Gideon Studio Branding
      - NEXT_PUBLIC_APP_NAME=Gideon Studio
      - NEXT_PUBLIC_APP_DESCRIPTION=Your Personal AI Studio
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-https://ai.gideon.studio}
      # Feature Flags - Disable Discover/Market
      - FEATURE_FLAGS=-market
      # Database
      - DATABASE_DRIVER=node
      - DATABASE_URL=${DATABASE_URL:-postgresql://gideon:password@postgres:5432/gideon_studio}
      - DATABASE_URL_NON_POOLING=${DATABASE_URL_NON_POOLING:-postgresql://gideon:password@postgres:5432/gideon_studio}
      # Application URL
      - APP_URL=${APP_URL:-http://localhost:3000}
      - KEY_VAULTS_SECRET=${KEY_VAULTS_SECRET:-create-a-secure-key}
      # S3 Storage (Required for file uploads and Knowledge Base)
      - S3_ENDPOINT=http://minio:9000
      - S3_BUCKET=gideon-files
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID:-minioadmin}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY:-minioadmin}
      - S3_PUBLIC_DOMAIN=http://localhost:9000
      - S3_ENABLE_PATH_STYLE=1
      # Google Gemini (set your API key here)
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-your-google-gemini-api-key}
      # ChromaDB Connection
      - CHROMADB_URL=http://chromadb:8000
      # Additional LLMs (optional)
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3210/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: gideon_studio
      POSTGRES_USER: gideon
      POSTGRES_PASSWORD: password
    volumes:
      - /home/jaymes/postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gideon -d gideon_studio"]
      interval: 30s
      timeout: 10s
      retries: 5

  chromadb:
    image: chromadb/chroma:latest
    container_name: gideon-chromadb
    ports:
      - "8000:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      # Development auth (configure for production)
      - CHROMA_SERVER_AUTHN_CREDENTIALS=admin:chromadb_password
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.token_authn.TokenAuthenticationServerProvider
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: gideon-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  chromadb_data:
  minio_data:
